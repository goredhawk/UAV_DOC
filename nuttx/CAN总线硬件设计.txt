1. 应用程序中write应该使用阻塞模式写数据，
2. 读数据也应该使用阻塞模.


----------------------------------------------------------------------------
pool机制：
1.  应用程序阻塞等待pool定的时候，如果超过这个时间，就认为是超时
    就会返回返回值是-1，表示超时，就会退出当前等待，继续往下跑
    
2. 应用程序直接使用非阻塞进行发送数据，直到等待发送完成数据，才进行下面给 
   的操作.

----------------------------------------------------------------------------

 while (nexttail == fifo->tx_head)
         -> if (filep->f_oflags & O_NONBLOCK)  //  非阻塞
            {
              if (nsent == 0)
                {
                  ret = -EAGAIN;                             //  返回-1
                }
              else
                {
                  ret = nsent;
                }
              goto return_with_irqdisabled;
            }
            
            
 ---------------------------------------------------------------------------------------------
 CAN1    RX     TX
 ______________________________________________________________
1           PD0    PD1             【THEONE】
2           PB8    PB9              
3           PA11  PA12           【正点原子】   
 ______________________________________________________________
 
 都是第一默认功能
 
 can1是挂载在APB1: 42MB
 
 GPIO_PinAFConfig（） 映射到CAN1上
  ---------------------------------------------------------------------------------------------
 
  /* CAN
 *
 * Connector 10 (CN10) is DB-9 male connector that can be used with CAN1 or CAN2.
 *
 *   JP10 connects CAN1_RX or CAN2_RX to the CAN transceiver
 *   JP3 connects CAN1_TX or CAN2_TX to the CAN transceiver
 *
 * CAN signals are then available on CN10 pins:
 *
 *   CN10 Pin 7 = CANH
 *   CN10 Pin 2 = CANL
 *
 * Mapping to STM32 GPIO pins:
 *
 *   PD0   = FSMC_D2 & CAN1_RX
 *   PD1   = FSMC_D3 & CAN1_TX
 *   PB13  = ULPI_D6 & CAN2_TX
 *   PB5   = ULPI_D7 & CAN2_RX
 */

#define GPIO_CAN1_RX        GPIO_CAN1_RX_3
#define GPIO_CAN1_TX        GPIO_CAN1_TX_3

-------------------------------------------------------------------------------------------------------------------------------
#define GPIO_CAN1_RX_3        (GPIO_ALT|GPIO_AF9|GPIO_SPEED_50MHz|GPIO_PUSHPULL|GPIO_PORTD|GPIO_PIN0)
#define GPIO_CAN1_TX_3        (GPIO_ALT|GPIO_AF9|GPIO_SPEED_50MHz|GPIO_PUSHPULL|GPIO_PORTD|GPIO_PIN1)
-------------------------------------------------------------------------------------------------------------------------------


1. 测试方法:
 if (filep->f_oflags & O_NONBLOCK)
            {
              if (nsent == 0)
                {
                  //ret = -EAGAIN;
                  ret = 20;                     // --------------调试方法:
                }
              else
                {
                  ret = nsent;
                }
              goto return_with_irqdisabled;
            }

调试信息:
ERROR: write(3) returned 20  



调试信息1:  数据包的长度改变，也仅仅可以发哦是那个7次
----------------------------------------------
[send] ALL:   3, ID:   1, DLC: 1
nsh> [send] ALL:   4, ID:   2, DLC: 2
[send] ALL:   5, ID:   3, DLC: 3
[send] ALL:   6, ID:   4, DLC: 4
[send] ALL:   7, ID:   5, DLC: 5
[send] ALL:   8, ID:   6, DLC: 6
[send] ALL:   9, ID:   7, DLC: 7
ERROR: write(10) returned 20
[send] ALL:  10, ID:   8, DLC: 8
ERROR: write(3) returned 20
-----------------------------------------------
只能发送7次，第8次失败


调试信息1:   数据包每次发送8个，也仅仅可以发送7次
----------------------------------------------
[send] ALL:  10, ID:   1, DLC: 8
nsh> [send] ALL:  10, ID:   1, DLC: 8
[send] ALL:  10, ID:   1, DLC: 8
[send] ALL:  10, ID:   1, DLC: 8
[send] ALL:  10, ID:   1, DLC: 8
[send] ALL:  10, ID:   1, DLC: 8
[send] ALL:  10, ID:   1, DLC: 8
-----------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------
IIC总线错误情况
--------------------------------------------------------------------------------------------------------------------------------
应答场长度为2个位，包含应答间隙（ACK SLOT）和应答界定符（ACK DELIMITER）。在应答场里，发送站发送两个“隐性”位。当接收器正确地接收到有效的报文，接收器就会在应答间隙（ACK SLOT）期间（发送ACK信号）向发送器发送一“显性”的位以示应答。
应答间隙：所有接收到匹配CRC序列（CRC SEQUENCE）的站会在应答间隙（ACK SLOT）期间用一“显性”的位写入发送器的“隐性”位来作出回答。
ACK界定符：ACK界定符是ACK场的第二个位，并且是一个必须为“隐性”的位。因此，应答间隙（ACK SLOT）被两个“隐性”的位所包围，也就是CRC界定符（CRC DELIMITER）和ACK界定符（ACK DELIMITER）。
此主题相关图片如下：
-----------------------------------------------------------------------------------------------------------------------------------
主机在发送CRC之后自动将总线作为隐形电位,   接收器发送ACK的显性电平作为应答，同时再拉高表示是CRC也是正确的，否则总线
自动重传数据包。下面测试.
1. 



2. 1个位宽是中心边沿采集数据，逻辑分析仪上的时钟是1个高电平和1个低电平组成1个时钟，算出时钟的频率