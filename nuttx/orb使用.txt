=============================================================================
@ 重要文档分析
=============================================================================

http://blog.csdn.net/FreeApe/article/details/46880637
=============================================================================

topic自动生成部分
----------------------------------------------------------------------------
文件名字 xxx.h

@定义1个结构体   xxx_s
#ifdef __cplusplus
struct __EXPORT myuorb_test_s {
#else
struct myuorb_test_s {
#endif
	uint64_t timestamp; // required for logger
	int32_t r;
	uint8_t _padding0[4]; // required for logger

#ifdef __cplusplus

#endif
};

@声明1个orb   xxx
ORB_DECLARE(myuorb_test);
----------------------------------------------------------------------------



1. 发送1个广告 
orb_advert_t orb_advertise(const struct orb_metadata *meta, const void *data)

@ 返回1个topic的发布者
@ 输入1个ID
@ 举例子:
        struct vehicle_attitude_s att;  
	orb_advert_t att_pub = orb_advertise(ORB_ID(vehicle_attitude), &att);
	


2. 通过1个topic发布1个数据
int  orb_publish(const struct orb_metadata *meta, orb_advert_t handle, const void *data)


@ 返回1个topic的发布者
@ 输入    meta：ID
	handle: 发布者
	*data : 数据

@ 举例子:
	orb_publish(ORB_ID(myuorb_test),topic_handle,&rd);


3. 订阅1个ID
int  orb_subscribe(const struct orb_metadata *meta)

@ 举例子:
topics_handle = orb_subscribe(ORB_ID(myuorb_test));

4. 检查是否更新
int  orb_check(int handle, bool *updated)

@ 返回1个topic的发布者
@ 输入   
	handle: 发布者
	*updated : 是否更新
@ 举例子:
orb_check(topics_handle,&updated);

5. 获取数据，从topic中
orb_copy(ORB_ID(myuorb_test),topics_handle,&rds);

@ 自己重新定义1个缓冲区
struct myuorb_test_s rds;



测试信息:
myuorb_test_app 
INFO  [myuorb_test_app] uorb publishint test
WARN  [myuorb_test_app] the new data is:        123
WARN  [myuorb_test_app] the updated data is:    123

4. 获取那个优先级实例的数据
orb_advert_t orb_advertise_multi(const struct orb_metadata *meta, const void *data, int *instance, int priority)

5. 


L3GD20: 定义的陀螺的数据
	_gyro_topic = orb_advertise_multi(ORB_ID(sensor_gyro), &grp,
						  &_orb_class_instance, (is_external()) ? ORB_PRIO_VERY_HIGH : ORB_PRIO_DEFAULT);


if (accel_notify && !(_pub_blocked)) {
	/* log the time of this report */
	perf_begin(_controller_latency_perf);
	/* publish it */
	orb_publish(ORB_ID(sensor_accel), _accel_topic, &arb); //发布
}

if (gyro_notify && !(_pub_blocked)) {
	/* publish it */
	orb_publish(ORB_ID(sensor_gyro), _gyro->_gyro_topic, &grb); //发布
}


