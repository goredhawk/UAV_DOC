px4nucleoF767ZI-v1硬件分析：

1. nuttx-configs/px4nucleoF767ZI-v1/include/board.h
board.h中定义了硬件的配置

2. 明白应用程序的名字对应的源文件
./NuttX/nuttx/include/nuttx/binfmt/builtin.h
./NuttX/apps/include/builtin/builtin.h

没有看到那个链表

3. src/drivers/
根文件文件都是通用的，
文件下的可能是不同单板的驱动

4. 初始化LED驱动
LED::LED() :
#ifdef __PX4_NUTTX
	CDev("led", LED0_DEVICE_PATH)
#else
	VDev("led", LED0_DEVICE_PATH)
#endif
{
	// force immediate init/device registration
	init();
}

注册后的驱动的设备节点
1. 如果定义__PX4_NUTTX那么，设备节点的名字是:     "/dev/led0"
2. 如果没有定义__PX4_NUTTX那么，设备节点的名字是: "/dev/led0"


led.cpp文件:
定义1个LED驱动的类
#ifdef __PX4_NUTTX
class LED : device::CDev
#else
class LED : device::VDev    // 继承的父类
#endif
{
public:
	LED();                  // 构造函数  
	virtual ~LED();         // 析构函数

	virtual int		init(); //初始化函数
	virtual int		ioctl(device::file_t *filp, int cmd, unsigned long arg);
	                        // IOCTRL机制
};

namespace
{
LED	*gLED;
}

void
drv_led_start(void)
{
	if (gLED == nullptr) {
		gLED = new LED;
	}
}

LED驱动加载过程:
board_app_initialize()
	-> drv_led_start();
	  ->gLED = new LED; // 创建1个LED的驱动,设备节点也就是存在了.

控制设备设备的方式：
ioctl控制

应用程序可以使用的资源是：
1. 已经提供了1个对象的指针是gLED
2. 需要自己手动打开和关闭设备节点


4. 可以使用的LED驱动
rgbled： 红绿蓝
gpio_led ：	GPIO的led

5.src/module下的模块
builtin_commands.c中定义1个所有函数的入口名字.
src/module/gpio_led/gpio_led.c










