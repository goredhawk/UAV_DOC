
px4fmu-v2 ：剩下这2个
px4io-v2　：　PID   PRI SCHD TYPE   NP STATE    NAME

// 系统任务 
进程id    调度   类型     状态            名字
PID   PRI SCHD TYPE   NP STATE    NAME
    0   0 FIFO TASK      READY    Idle Task()
    1 192 FIFO KTHREAD   WAITSIG  hpwork()
    2  50 FIFO KTHREAD   WAITSIG  lpwork()
    3 100 FIFO TASK      WAITSEM  init()
    
   69 220 FIFO TASK      WAITSEM  gps()
    7  70 FIFO TASK      RUNNING  nshterm(10004630)
   72 215 FIFO TASK      WAITSIG  commander(100085e0, 10007830)
  106 250 FIFO TASK      WAITSEM  ekf2()
   75 100 FIFO TASK      WAITSIG  mavlink_if0(10006c70, 10003870, 10004270, 10007810)
   76 175 FIFO PTHREAD   WAITSEM  mavlink_rcv_if0(20009150)
  110 250 FIFO TASK      WAITSEM  mc_att_control()
  112 250 FIFO TASK      WAITSEM  mc_pos_control()
   49  90 FIFO TASK      WAITSEM  dataman()
  116 105 FIFO TASK      WAITSEM  navigator()
   89  70 FIFO TASK      WAITSIG  sdlog2(20008be0, 20008bf0, 20008c00, 20008c10, 20008c20, 20008c30, 20008c40, 20008c50)
  123 215 FIFO TASK      WAITSEM  monitor()
   92  50 FIFO PTHREAD   WAITSEM  commander_low_prio(0)
   63 250 FIFO TASK      WAITSEM  sensors()


int MONITOR_DRV::task_main() {
    pollfd fds[1];
   // char buffer[MONITOR_DRV_SIZE];

#if MONITOR_DEBUG_EN
    int Sqence = 0;
    int error  = 0;
#endif

    if (OK != init()) {
        return -1;
    }
    warnx("Init Success!");
    
   ///  
   
   int MONITOR_DRV::task_main() {    //成员函数
   
  class MONITOR_DRV {                  
public:
         MONITOR_DRV(const char *uart_path, int baudrate);   // 构造函数， 修改波特率
        ~MONITOR_DRV();                                                       // 析构函数
        int init();
        void start();
        void stop();

private:
    static int task_main_trampoline(int argc, char *argv[]);
    int task_main(void);                                                        //  进入运行函数 ----------------------------------
    
    char _port[20];					///< device / serial port path
    int	 _serial_fd;				 ///< serial interface to MONITOR_DRV
    int  _baudrate;                 ///< baudrate

    //uORB topic
    int	_orb_class_instance;
    orb_advert_t _monitor_drv_topic; 		///< uORB pub for MONITOR_DRV
    uint8_t		 _buffer[2][MONITOR_DRV_SIZE];
    int		_buffer_idx;
    int                      	_flip;


    char				_linebuf[10];
    unsigned			_linebuf_index;
    enum SF0X_PARSE_STATE		_parse_state;*/
    volatile int _task;

    bool _task_should_exit;			///< flag to indicate the main worker is running
};
    

void start(const char *uart_path, int baudrate) {
        if (dev != nullptr) {
                errx(1, "already started");
        }

        /* create the driver */
        dev = new MONITOR_DRV(uart_path, baudrate);
        
        
  int monitor_main(int argc, char *argv[]) {
        /* set to default */
        const char *device_name = MONITOR_DEFAULT_PORT;
        /*
         * Start/load the driver.
         */
        if (!strcmp(argv[1], "start")) {
                /* work around getopt unreliability */
                if (argc > 3) {
                        if (!strcmp(argv[2], "-d")) {
                                PX4_WARN("monitor  -d %s", argv[3]);
                                device_name = argv[3];

                        } else {
                                PX4_ERR("DID NOT GET -d");
                                goto out;
                        }
                }

                monitor_drv::start(device_name, 38400);//115200                            ///---------------------------执行命名空间下的的start函数
                                
        }

        if (!strcmp(argv[1], "stop")) {
                monitor_drv::stop();
        }
        
        //启动流程   
          int monitor_main(int argc, char *argv[]) {
                    ->  monitor_drv::start(device_name, 38400);//115200                            ///---------------------------执行命名空间下的的start函数
                          ->  dev = new MONITOR_DRV(uart_path, baudrate);                       // 创建类，进行构造函数修改波特率
                           -> dev->start();                                                                             // 执行对象的start函数 
                                ->_task = px4_task_spawn_cmd("monitor", SCHED_DEFAULT,
                                               SCHED_PRIORITY_SLOW_DRIVER - 5, 2000, (px4_main_t)&MONITOR_DRV::task_main_trampoline, NULL);  // 创建任务
                                                -> (px4_main_t)&MONITOR_DRV::task_main_trampoline  //执行命令
                                                     -> return dev->task_main();
                                                        -> int MONITOR_DRV::task_main() {  //执行主函数 
                                                    
 CONFIG_ARCH_CHIP_STM32F427V=y   ： 配置芯片                     
 
 NuttX/nuttx/arch/arm/src/nuc1xx/nuc_serial.c  //删除硬件
 
 theone-mc/NuttX/nuttx/arch/arm/src  //平台文件
 
 NuttX/nuttx/configs/lm4f120-launchpad/nsh/defconfig:CONFIG_ARCH_C
 NuttX/nuttx/configs/lm4f120-launchpad/nsh/defconfig:CONFIG_ARCH_C
 
 /theone-mc/nuttx-configs： 配置
 
 
void os_start(void)        //启动os
{
  int i;
  slldbg("Entry\n"); 
  
  
   DEBUGVERIFY(os_bringup());  //任务挂起
 
 
__start--                                 #处理器执行的第一条指令
        |
        v
   stm32_clockconfig()------              #初始化时钟
                           |
                           v
                 rcc_reset()              #复位rcc
                 stm32_stdclockconfig()   #初始化标准时钟
                 rcc_enableperipherals()  #使能外设时钟
                           |
        --------------------
        |
        v
   stm32_fpuconfig()                      #配置fpu
   stm32_lowsetup()                       #基本初始化串口，之后可以使用up_lowputc()
   stm32_gpioinit()                       #初始化gpio，只是调用stm32_gpioremap()设置重映射
   up_earlyserialinit()                   #初始化串口，之后可以使用up_putc()
   stm32_boardinitialize()--              #板级初始化
                           |
                           v
                 stm32_spiinitialize()    #初始化spi，只是调用stm32_configgpio()设置gpio
                 stm32_usbinitialize()    #初始化usb，只是调用stm32_configgpio()设置gpio
                 board_led_initialize()   #初始化led，只是调用stm32_configgpio()设置gpio
                           |
        --------------------
        |
        v
   os_start()---------------              #初始化操作<a class="keylink" href="http://www.2cto.com/os/" target="_blank">系统</a>
                           |
                           v
                 dq_init()                #初始化各种状态的任务列表（置为null）
                 g_pidhash[i]=            #初始化唯一可以确定的元素--进程ID
                 g_pidhash[PIDHASH(0)]=   #分配空闲任务的进程ID为0
                 g_idletcb=               #初始化空闲任务的任务控制块
                 sem_initialize()--       #初始化信号量
                                  |
                                  v
                       dq_init()          #将信号量队列置为null
                       sem_initholders()  #初始化持有者结构以支持优先级继承，shenzhou/nsh未调用
                                  |
                           --------
                           |
                           v
                 up_allocate_heap()       #分配用户模式的堆（设置堆的起点和大小）
                 kumm_initialize()        #初始化用户模式的堆
                 up_allocate_kheap()      #分配内核模式的堆，shenzhou/nsh未调用
                 kmm_initialize()         #初始化内核模式的堆，shenzhou/nsh未调用
                 task_initialize()        #初始化任务数据结构，shenzhou/nsh未调用
                 irq_initialize()         #将所有中断向量都指向同一个异常中断处理程序
                 wd_initialize()          #初始化看门狗数据结构
                 clock_initialize()       #初始化rtc
                 timer_initialize()       #配置POSIX定时器
                 sig_initialize()         #初始化信号
                 mq_initialize()          #初始化命名消息队列
                 pthread_initialize()     #初始化线程特定的数据，空函数
                 fs_initialize()---       #初始化文件系统
                                  |
                                  v
                       sem_init()         #初始化节点信号量为1
                       files_initialize() #初始化文件数组，空函数
                                  |
                           --------
                           |
                           v
                 net_initialize()--       #初始化网络
                                  |
                                  v
                       uip_initialize()   #初始化uIP层
                       net_initroute()    #初始化路由表，shenzhou/nsh未调用
                       netdev_seminit()   #初始化网络设备信号量
                       arptimer_init()    #初始化ARP定时器
                                  |
                           --------
                           |
                           v
                 up_initialize()---       #处理器特定的初始化
                                  |
                                  v
                       up_calibratedelay()#校准定时器
                       up_addregion()     #增加额外的内存段
                       up_irqinitialize() #设置中断优先级，关联硬件异常处理函数
                       up_pminitialize()  #初始化电源管理，shenzhou/nsh未调用
                       up_dmainitialize() #初始化DMA，shenzhou/nsh未调用
                       up_timerinit()     #初始化定时器中断
                       devnull_register() #注册/dev/null
                       devzero_register() #注册/dev/zero，shenzhou/nsh未调用
                       up_serialinit()    #注册串口控制台/dev/console和串口/dev/ttyS0
                       up_rnginitialize() #初始化并注册随机数生成器，shenzhou/nsh未调用
                       up_netinitialize() #初始化网络，是arch/arm/src/chip/stm32_eth.c中的
                       up_usbinitialize() #初始化usb驱动，shenzhou/nsh未调用
                       board_led_on()     #打开中断使能led，但很快会被其它地方的led操作改变状态
                                  |
                           --------
                           |
                           v
                 lib_initialize()         #初始化c库，空函数
                 group_allocate()         #分配空闲组
                 group_setupidlefiles()   #在空闲任务上创建stdout、stderr、stdin
                 group_initialize()       #完全初始化空闲组
                 os_bringup()------       #创建初始任务
                                  |
                                  v
                       KEKERNEL_THREAD()  #启动内核工作者线程
                       board_initialize() #最后一刻的板级初始化，shenzhou/nsh未调用
                       TASK_CREATE()      #启动默认应用程序
                                  |
                           --------
                           |
                           v
                 for up_idle()            #空闲任务循环
                           |
        --------------------
        |
        v
   for(;;)                                #不应该到达这里                               
   for(;;)                                #不应该到达这里                               
                                
        
串口驱动程序:   
----------------------------------------------------------------------------------------------------------------------
#ifdef USE_SERIALDRIVER
#ifdef HAVE_UART

/****************************************************************************
 * Private Types
 ****************************************************************************/

struct up_dev_s
{
  struct uart_dev_s dev;       /* Generic UART device */
  uint16_t          ie;        /* Saved interrupt mask bits value */
  uint16_t          sr;        /* Saved status bits */

  /* If termios are supported, then the following fields may vary at
   * runtime.
   */

#ifdef CONFIG_SERIAL_TERMIOS
  uint8_t           parity;    /* 0=none, 1=odd, 2=even */
  uint8_t           bits;      /* Number of bits (7 or 8) */
  bool              stopbits2; /* True: Configure with 2 stop bits instead of 1 */
#ifdef CONFIG_SERIAL_IFLOWCONTROL
  bool              iflow;     /* input flow control (RTS) enabled */
#endif
#ifdef CONFIG_SERIAL_OFLOWCONTROL
  bool              oflow;     /* output flow control (CTS) enabled */
#endif
  uint32_t          baud;      /* Configured baud */
#else

static void up_send(struct uart_dev_s *dev, int ch)
{
  struct up_dev_s *priv = (struct up_dev_s*)dev->priv;
#ifdef HAVE_RS485
  if (priv->rs485_dir_gpio != 0)
    stm32_gpiowrite(priv->rs485_dir_gpio, priv->rs485_dir_polarity);
#endif
  up_serialout(priv, STM32_USART_TDR_OFFSET, (uint32_t)ch);
}

void up_serialinit(void)  //串口驱动注
#ifdef HAVE_UART
  char devname[16];
  unsigned i;
  unsigned minor = 0;
#ifdef CONFIG_PM
  int ret;
#endif

  /* Register to receive power management callbacks */

#ifdef CONFIG_PM
  ret = pm_register(&g_serialcb);
  DEBUGASSERT(ret == OK);
#endif

  /* Register the console */

#if CONSOLE_UART > 0
  (void)uart_register("/dev/console", &uart_devs[CONSOLE_UART - 1]->dev);
#ifndef CONFIG_SERIAL_DISABLE_REORDERING
  /* If not disabled, register the console UART to ttyS0 and exclude
   * it from initializing it further down
   */
  (void)uart_register("/dev/ttyS0",   &uart_devs[CONSOLE_UART - 1]->dev);
  minor = 1;

#endif /* CONFIG_SERIAL_DISABLE_REORDERING not defined */

/* If we need to re-initialise the console to enable DMA do that here. */
# ifdef SERIAL_HAVE_CONSOLE_DMA
  up_dma_setup(&uart_devs[CONSOLE_UART - 1]->dev);
# endif
#endif /* CONSOLE_UART > 0 */

  /* Register all remaining USARTs */

  strcpy(devname, "/dev/ttySx"); 

  for (i = 0; i < STM32_NUSART; i++)  //注册所有的驱动6个驱动ttyS0
    {
      /* Don't create a device for non configured ports */
      if (uart_devs[i] == 0)
        {
          continue;
        }

#ifndef CONFIG_SERIAL_DISABLE_REORDERING
      /* Don't create a device for the console - we did that above */
      if (uart_devs[i]->dev.isconsole)
        {
          continue;                                                        // 跳出去
        }
#endi
      devname[9] = '0' + minor++;                       
      (void)uart_register(devname, &uart_devs[i]->dev);   // 数组中的位置决定了ttys6的位置
    }
#endif /* HAVE UART */
}

#elif defined(CONFIG_ARCH_CHIP_STM32F427I)   /* BGA176; LQFP176 1024/2048KiB flash 256KiB SRAM */
#  define STM32_NUSART                   8   /* USART1-3 and 6, UART 4-5 and 7-8 */   8个串口


定义串口驱动的数据结构
static struct up_dev_s *uart_devs[STM32_NUSART] =
{
#ifdef CONFIG_STM32_USART1
  [0] = &g_usart1priv,
#endif
#ifdef CONFIG_STM32_USART2
  [1] = &g_usart2priv,
#endif
#ifdef CONFIG_STM32_USART3
  [2] = &g_usart3priv,
#endif
#ifdef CONFIG_STM32_UART4
  [3] = &g_uart4priv,
#endif
#ifdef CONFIG_STM32_UART5
  [4] = &g_uart5priv,
#endif
#ifdef CONFIG_STM32_USART6
  [5] = &g_usart6priv,
#endif
#ifdef CONFIG_STM32_UART7
  [6] = &g_uart7priv,
#endif
#ifdef CONFIG_STM32_UART8
  [7] = &g_uart8priv,
#endif
};

串口控制台分析:

* arch/arm/src/stm32/stm32_serial.c: If there is a serial console,
	  it would be ttyS0 and the others would be ttyS1-5.  If there
	  is not serial console, was labeling them ttyS1-6; now labels them
	  ttyS0-5.
	  
* include/nuttx/syslog.h and drivers/syslog/syslog.c:  This is a new, generic
	  SYSLOG device that can redirect debug output to any character device or file.
	  So you can log debug output to a file or you can put the console on /dev/ttyS0
	  and the debug output on /dev/ttyS1


3 定义控制台 


#undef HAVE_USB_CONSOLE
#if defined(CONFIG_USBDEV)

/* Check for a PL2303 serial console.  Use console device "/dev/console". */

#  if defined(CONFIG_PL2303) && defined(CONFIG_PL2303_CONSOLE)
#    define HAVE_USB_CONSOLE 1

/* Check for a CDC/ACM serial console.  Use console device "/dev/console". */

#  elif defined(CONFIG_CDCACM) && defined(CONFIG_CDCACM_CONSOLE)
#    define HAVE_USB_CONSOLE 1

/* Check for a generic USB console.  In this case, the USB console device
 * must be provided in CONFIG_NSH_CONDEV.
 */

#  elif defined(CONFIG_NSH_USBCONSOLE)
#    define HAVE_USB_CONSOLE 1
#  endif
#endif
