

1. 测量数量
struct perf_ctr_count {       
2. 
struct perf_ctr_elapsed { 
3. 内部测量    
struct perf_ctr_interval {

/**
1. 添加类型和名字到结构体
2. 把结构体添加到链表的头部。
*/
perf_alloc(enum perf_counter_type type, const char *name)
	if (ctr != NULL) {
	ctr->type = type;                     
	ctr->name = name;
	sq_addfirst(&ctr->link, &perf_counters);
	}


2. 使用
typedef struct perf_ctr_header	*perf_counter_t; //定义1个数据类型

/**
 *

 */
perf_end(perf_counter_t handle)
 -> struct perf_ctr_elapsed *pce = (struct perf_ctr_elapsed *)handle;
 -> if (elapsed < 0) {   
		pce->event_overruns++;  //时间错误小于0，变量pce->event_overruns加1
	} else {
		pce->event_count++;     //时间大于0，变量pce->event_count加1

struct perf_ctr_elapsed {
	struct perf_ctr_header	hdr;
	uint64_t		event_count;     ： 事件次数
	uint64_t		event_overruns;  ： 错误次数
	uint64_t		time_start;      ： 开始时间
	uint64_t		time_total;      ： 总共时间
	uint64_t		time_least;      :  最小时间
	uint64_t		time_most;       :  最大时间
	float			mean;
	float			M2;
};

adxl355 start  