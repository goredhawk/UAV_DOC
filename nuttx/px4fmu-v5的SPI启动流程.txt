
/**
   SPI分配：
  
 * SENSORS are on SPI1
 * MEMORY is on bus SPI2
 * MS5611 is on bus SPI4
 */
#define PX4_SPI_BUS_SENSORS  1
#define PX4_SPI_BUS_MEMORY   2
#define PX4_SPI_BUS_BARO     4
#define PX4_SPI_BUS_EXTERNAL 6


#define GPIO_SPI1_MISO   GPIO_SPI1_MISO_1   /* PA6 */
#define GPIO_SPI1_MOSI   GPIO_SPI1_MOSI_3   /* PD7 */
#define GPIO_SPI1_SCK    GPIO_SPI1_SCK_3    /* PG11 */

#define GPIO_SPI2_MISO   GPIO_SPI2_MISO_3   /* PI2 */
#define GPIO_SPI2_MOSI   GPIO_SPI2_MOSI_3   /* PI3 */
#define GPIO_SPI2_SCK    GPIO_SPI2_SCK_5    /* PI1 */

#define GPIO_SPI4_MISO   GPIO_SPI4_MISO_2   /* PE13 */
#define GPIO_SPI4_MOSI   GPIO_SPI4_MOSI_1   /* PE6 */
#define GPIO_SPI4_SCK    GPIO_SPI4_SCK_1    /* PE2 */

#define GPIO_SPI5_MISO   GPIO_SPI5_MISO_1   /* PF8 */
#define GPIO_SPI5_MOSI   GPIO_SPI5_MOSI_1   /* PF9 */
#define GPIO_SPI5_SCK    GPIO_SPI5_SCK_1    /* PF7 */

#define GPIO_SPI6_MISO   GPIO_SPI6_MISO_1   /* PG12 */
#define GPIO_SPI6_MOSI   GPIO_SPI6_MOSI_3   /* PB5 */
#define GPIO_SPI6_SCK    GPIO_SPI6_SCK_1    /* PG13 */


// spi片选对应设置
static const uint32_t spi1selects_gpio[] = PX4_SENSOR_BUS_CS_GPIO;
static const uint32_t spi2selects_gpio[] = PX4_MEMORY_BUS_CS_GPIO;
#ifdef CONFIG_STM32F7_SPI3
static const uint32_t spi3selects_gpio[] = {FIXME};
#error Need to define SPI3 Usage
#endif
static const uint32_t spi4selects_gpio[] = PX4_BARO_BUS_CS_GPIO;
#ifdef CONFIG_STM32F7_SPI3
static const uint32_t spi5selects_gpio[] = {FIXME};;
#error Need to define SPI5 Usage
#endif
static const uint32_t spi6selects_gpio[] = PX4_EXTERNAL_BUS_CS_GPIO;


stm32_boardinitialize(void)
  -> stm32_spiinitialize(); //片选IO配置
__EXPORT int stm32_spi_bus_initialize(void)
  -> spi_sensors = stm32_spibus_initialize(PX4_SPI_BUS_SENSORS); //配置1个SPI
	 if (bus == 1)  priv = &g_spi1dev;  //SPI的排序从1开始
  -> spi_memory = stm32_spibus_initialize(PX4_SPI_BUS_MEMORY);
  -> spi_baro   = stm32_spibus_initialize(PX4_SPI_BUS_BARO);	
    SPI_SETFREQUENCY(spi_baro, 20 * 1000 * 1000);
	SPI_SETBITS(spi_baro, 8);
	SPI_SETMODE(spi_baro, SPIDEV_MODE3);

	for (int cs = PX4_BARO_BUS_FIRST_CS;   //全部不使能
	         cs <= PX4_BARO_BUS_LAST_CS; 
			 cs++) {
		SPI_SELECT(spi_baro, cs, false);
	}
__EXPORT void stm32_spiinitialize(void)


//IO定义:
#define GPIO_SPI_CS_MEMORY      /* PF5 */  (GPIO_OUTPUT|GPIO_PUSHPULL|GPIO_SPEED_2MHz|GPIO_OUTPUT_SET|GPIO_PORTF|GPIO_PIN5)
#define GPIO_SPI_CS_MS5611      /* PF10 */ (GPIO_OUTPUT|GPIO_PUSHPULL|GPIO_SPEED_2MHz|GPIO_OUTPUT_SET|GPIO_PORTF|GPIO_PIN10)

修改后:
GPIO_SPI_CS_MEMORY 和 GPIO_SPI_CS_MEMORY 相互交换

查看GPIO_SPI_CS_MS5611是否仅仅被1次调用，这样就可以直接修改替换


SPI的ms5611启动会不会检测芯片还是仅仅初始化spi总线的和片选？


发现log: 

1
======
nsh> ms5611 -s start
MS5611_SPI on SPI bus 4 at 64 (20000 KHz)
WARN  [ms5611] no device on bus 3

2
======
没有注册成功，没有发现设备节点

配接过程:
-#define GPIO_SPI_CS_MEMORY      /* PF5 */  (GPIO_OUTPUT|GPIO_PUSHPULL|GPIO_SPEED_2MHz|GPIO_OUTPUT_SET|GPIO_PORTF|GPIO_PIN5)
-#define GPIO_SPI_CS_MS5611      /* PF10 */ (GPIO_OUTPUT|GPIO_PUSHPULL|GPIO_SPEED_2MHz|GPIO_OUTPUT_SET|GPIO_PORTF|GPIO_PIN10)
+//#define GPIO_SPI_CS_MEMORY      /* PF5 */  (GPIO_OUTPUT|GPIO_PUSHPULL|GPIO_SPEED_2MHz|GPIO_OUTPUT_SET|GPIO_PORTF|GPIO_PIN5)
+//#define GPIO_SPI_CS_MS5611      /* PF10 */ (GPIO_OUTPUT|GPIO_PUSHPULL|GPIO_SPEED_2MHz|GPIO_OUTPUT_SET|GPIO_PORTF|GPIO_PIN10)
+#define GPIO_SPI_CS_MS5611      /* PF5 */  (GPIO_OUTPUT|GPIO_PUSHPULL|GPIO_SPEED_2MHz|GPIO_OUTPUT_SET|GPIO_PORTF|GPIO_PIN5)
+#define GPIO_SPI_CS_MEMORY      /* PF10 */ (GPIO_OUTPUT|GPIO_PUSHPULL|GPIO_SPEED_2MHz|GPIO_OUTPUT_SET|GPIO_PORTF|GPIO_PIN10)
 #define GPIO_SPI_CS_BMI055_ACC  /* PG10 */ (GPIO_OUTPUT|GPIO_PUSHPULL|GPIO_SPEED_2MHz|GPIO_OUTPUT_SET|GPIO_PORTG|GPIO_PIN10)


调试信息: 出现uorb失败，说民就是，启动成功了
ms5611 -s start
MS5611_SPI on SPI bus 4 at 64 (20000 KHz)
WARN  [uorb] node_open as advertiser failed.
WARN  [ms5611] failed to create sensor_baro publication

选择,设备， d: spi总线 id: 片选id, s是否使能
#define SPI_SELECT(d,id,s) ((d)->ops->select(d,id,s))

GPIO写数据
stm32_gpiowrite(spi6selects_gpio[cs], 1);

__EXPORT void stm32_spi4select(FAR struct spi_dev_s *dev, enum spi_dev_e devid, bool selected)
  -> int sel = (int) devid; //获取select号
  -> for (int cs = 0; arraySize(spi4selects_gpio) > 1 && cs < arraySize(spi4selects_gpio); cs++) {
		stm32_gpiowrite(spi4selects_gpio[cs], 1);
	 }
  ->uint32_t gpio = spi4selects_gpio[PX4_SPI_DEV_ID(sel)]; //获取gpio
  ->stm32_gpiowrite(gpio, !selected);  //片选io
  
  
  
驱动程序的调用:

/*
  list of supported bus configurations
 */
struct ms5611_bus_option {
	enum MS5611_BUS busid;
	const char *devpath;
	MS5611_constructor interface_constructor;
	uint8_t busnum;
	MS5611 *dev;
} bus_options[] = {
#if defined(PX4_SPIDEV_EXT_BARO) && defined(PX4_SPI_BUS_EXT)
	{ MS5611_BUS_SPI_EXTERNAL, "/dev/ms5611_spi_ext", &MS5611_spi_interface, PX4_SPI_BUS_EXT, NULL },
#endif
#ifdef PX4_SPIDEV_BARO
	{ MS5611_BUS_SPI_INTERNAL, "/dev/ms5611_spi_int", &MS5611_spi_interface, PX4_SPI_BUS_BARO, NULL },
#endif
#ifdef PX4_I2C_BUS_ONBOARD
	{ MS5611_BUS_I2C_INTERNAL, "/dev/ms5611_int", &MS5611_i2c_interface, PX4_I2C_BUS_ONBOARD, NULL },
#endif
#ifdef PX4_I2C_BUS_EXPANSION
	{ MS5611_BUS_I2C_EXTERNAL, "/dev/ms5611_ext", &MS5611_i2c_interface, PX4_I2C_BUS_EXPANSION, NULL },
#endif
};

1. 选择其中1个条总线上的MS5611设备进行初始化
	{ MS5611_BUS_SPI_INTERNAL, "/dev/ms5611_spi_int", &MS5611_spi_interface, PX4_SPI_BUS_BARO, NULL },
	1.1 MS5611_BUS_SPI_INTERNAL： 内部总线
	1.2 "/dev/ms5611_spi_int"  ： 设备节点
		-> device::Device *
			MS5611_spi_interface(ms5611::prom_u &prom_buf, uint8_t busnum)
			->return new MS5611_SPI(busnum, (spi_dev_e)PX4_SPIDEV_BARO, prom_buf); //创建1节点
			   -> class MS5611_SPI : public device::SPI //继承命名空间device下的spi
 	             
return new MS5611_SPI(busnum, (spi_dev_e)PX4_SPIDEV_BARO, prom_buf);
-> MS5611_SPI::MS5611_SPI(uint8_t bus, spi_dev_e device, ms5611::prom_u &prom_buf) :
	SPI("MS5611_SPI", nullptr, bus, device, SPIDEV_MODE3, 20 * 1000 * 1000 /* will be rounded to 10.4 MHz */),
	_prom(prom_buf)
初始化1: SPI("MS5611_SPI", nullptr, bus, device, SPIDEV_MODE3,
                20 * 1000 * 1000 /* will be rounded to 10.4 MHz */) //调用的是SPI的构造函数 
			――>

device::Device *p = class MS5611_SPI (class MS5611_SPI : public device::SPI ：class __EXPORT SPI : public CDev)
            


//父类和子类的多态性处理
#include <iostream> 
using namespace std; 
class A 
{ 
public: 
    virtual void foo() 
    { 
        cout << "A's foo()" << endl; 
        bar(); 
    } 
    virtual void bar() 
    { 
        cout << "A's bar()" << endl; 
    } 
}; 
class B: public A 
{ 
public: 
    void foo() 
    { 
        cout << "B's foo()" << endl; 
        A::foo(); 
    } 
    void bar() 
    { 
        cout << "B's bar()" << endl; 
    } 
}; 
int main() 
{ 
    B bobj; 
    A *aptr = &bobj; 
    aptr->foo(); 
	
//输出结果:
    "B's foo()  //虚函数被子类修改的结果
	 A's foo()   // 执行A类的函数
	 B's bar()  // 指向bar函数
	
    A aobj = *aptr; //转化为A类对象,再次定义1个类，定义1个变量，进行赋值
	  ->  A aobj;
	  -> aobj = *aptr
	  -> aobj = bobj; // 把1个子类的数据类型的变量，赋值给父类，
	                  // 那么执行的父类的操作，原因是左边的类型很重要
    aobj.foo();       //
//输出结果:
//输出结果:
A's foo()
A's bar()
	
} 


父类的指针 = 指向 子类的变量： 执行子类
父类的变量 = 子类的变量赋值 ： 执行父类的成员函数

子类的变量会执行所有的父类的构造函数.

ms5611提供的接口:
MS5611_SPI::init()
MS5611_SPI::read(unsigned offset, void *data, unsigned count)
MS5611_SPI::ioctl(unsigned operation, unsigned &arg)

子类重写了父类的open,read, write函数
class MS5611_SPI : public device::SPI
{
public:
	MS5611_SPI(uint8_t bus, spi_dev_e device, ms5611::prom_u &prom_buf);
	virtual ~MS5611_SPI();

	virtual int	init();
	virtual int	read(unsigned offset, void *data, unsigned count);
	virtual int	ioctl(unsigned operation, unsigned &arg);
	
//进入了SPI的构造函数
SPI::SPI(const char *name,
	 const char *devname,
	 int bus,
	 enum spi_dev_e device,
	 enum spi_mode_e mode,
	 uint32_t frequency,
	 int irq) :
	// base class
	CDev(name, devname, irq),
	// public
	// protected
	locking_mode(LOCK_PREEMPTION),
	// private
	_device(device),
	_mode(mode),
	_frequency(frequency),
	_dev(nullptr),
	_bus(bus)
{
	// fill in _device_id fields for a SPI device
	_device_id.devid_s.bus_type = DeviceBusType_SPI;
	_device_id.devid_s.bus = bus;
	_device_id.devid_s.address = (uint8_t)device;
	// devtype needs to be filled in by the driver
	_device_id.devid_s.devtype = 0;
}

参数列表没有怎么办.

 MS5611_SPI::init()
	-> SPI::init()
	    -> _dev = px4_spibus_initialize(_bus); //初始化总线
		-> SPI_SELECT(_dev, _device, false);
		-> ret = probe(); //目前是空
		-> ret = CDev::init(); //创建设备节点
		-> DEVICE_LOG("on SPI bus %d at %d (%u KHz)", _bus, _device, _frequency / 1000); //正常启动
		
		_device： 表示设备号
		

C++的编程风格：类名和文件的名字是一样. 找到类名，就可以找到类的定义的位置
	-> if (_dev == nullptr) {
		_dev = px4_spibus_initialize(_bus); //初始化总线
		   ->#    define px4_spibus_initialize(port_1based)       stm32_spibus_initialize(port_1based)
		       ->  if (bus == 1)
                    -> spi_bus_initialize(priv); //调用最底层的spi总线初始化函数
			   

//通过函数的参数，作为形参列表的变量，也是可以的吗？？？			   
SPI::SPI(const char *name,
	 const char *devname,
	 int bus,
	 enum spi_dev_e device,
	 enum spi_mode_e mode,
	 uint32_t frequency,
	 int irq) :
	// base class
	CDev(name, devname, irq),
	// public
	// protected
	locking_mode(LOCK_PREEMPTION),
	// private
	_device(device),
	_mode(mode),
	_frequency(frequency),
	_dev(nullptr),
	_bus(bus)
{



驱动架构：
ms5611.cpp 
	-> ms5611_spi.cpp	
		-> spi.cpp 
		     -> stm32_spi.cpp


//终于找到这个位置			 
#define PX4_SPIDEV_BARO           PX4_MK_SPI_SEL(PX4_SPI_BUS_BARO,0)

MS5611_spi_interface(ms5611::prom_u &prom_buf, uint8_t busnum)
	-> return new MS5611_SPI(busnum, (spi_dev_e)PX4_SPIDEV_BARO, prom_buf); // <<决定了cs的位置>>
	PX4_SPIDEV_BARO： 决定了片选信号的位置

ms5611_main(int argc, char *argv[])
		busid = MS5611_BUS_SPI_INTERNAL;   // 决定内部总线
		device_type = MS5611_DEVICE;       // 决定1个变量
								
    ->ms5611::start(busid, device_type);
		―> for (i = 0; i < NUM_BUS_OPTIONS; i++) {
		     if (busid == MS5611_BUS_ALL && 
				bus_options[i].dev != NULL) {       //查看是否启动
		     if (busid != MS5611_BUS_ALL 
				&& bus_options[i].busid != busid) { //busid不对就退出
			 
			 started = started | start_bus(bus_options[i],
					device_type);                   //找到正确的ID,就创建总线
				-> bus_options[i] ={ MS5611_BUS_SPI_INTERNAL, "/dev/ms5611_spi_int",
				     	&MS5611_spi_interface, PX4_SPI_BUS_BARO,
						NULL },                    //<<找到定义的总线 PX4_SPI_BUS_BARO>> -----
				->  device::Device *interface =
						bus.interface_constructor(prom_buf, bus.busnum); //SPI的构造函数找到
		                           
			   	if (interface->init() != OK) {
						―>  执行spi_init()
						
				-> bus.dev = new MS5611(interface, prom_buf,
					bus.devpath, device_type); //创建1个设备节点
					
				->if (bus.dev != nullptr && OK != bus.dev->init()) {
					-> MS5611::init() //进行ms5611初始化
						-> _class_instance =
							  register_class_devname(BARO_BASE_DEVICE_PATH); //注册设备节点
							  while (true) {
							    -> if (OK != measure()) {	
								-> usleep(MS5611_CONVERSION_INTERVAL);
								
								
                                   
	-> start(enum MS5611_BUS busid, enum MS56XX_DEVICE_TYPES device_type) 
	
2个数据结构： 1个接口,1个ms5611
device::Device *interface = bus.interface_constructor(prom_buf, bus.busnum);
bus.dev = new MS5611(interface, prom_buf, bus.devpath, device_type);

//PX4_log信息:
#if defined(__PX4_ROS)

__EXPORT const char *__px4_log_level_str[_PX4_LOG_LEVEL_PANIC + 1] = { "INFO", "DEBUG", "WARN", "ERROR", "PANIC" };


1. 不能启动的原因： 可能是没有清出clean一下，可能成功


2. 启动都出气压计：8个PROM字节
MS5611_SPI on SPI bus 4 at 64 (20000 KHz)
prom[0]=0x848
prom[1]=0xb508
prom[2]=0xb158
prom[3]=0x6f54
prom[4]=0x63f3
prom[5]=0x805a
prom[6]=0x6ba1
prom[7]=0x69d9

函数结构:
struct ms5611_bus_option &find_bus(enum MS5611_BUS busid) 
作用: 发现SPI是那个总线id

ms5611 busid function

1. ms5611 -s start
2. ms5611 -s test

打开设备总线路径： /dev/ms5611_spi_int
{ MS5611_BUS_SPI_INTERNAL, "/dev/ms5611_spi_int", &MS5611_spi_interface, PX4_SPI_BUS_BARO, NULL },

3. 测试结果：
WARN  [ms5611] bus.devpath = /dev/ms5611_spi_int

4. 同一个总线也是可以SPI的模式和速度的.

5. 片选spi1中的片选信号: px4fmu-v2

// IO初始化
__EXPORT void stm32_spiinitialize(void)
{
#ifdef CONFIG_STM32_SPI1
	stm32_configgpio(GPIO_SPI_CS_GYRO);
	stm32_configgpio(GPIO_SPI_CS_ACCEL_MAG);
	stm32_configgpio(GPIO_SPI_CS_BARO);
	stm32_configgpio(GPIO_SPI_CS_HMC);
	stm32_configgpio(GPIO_SPI_CS_MPU);

	/* De-activate all peripherals,
	 * required for some peripheral
	 * state machines
	 */
	stm32_gpiowrite(GPIO_SPI_CS_GYRO, 1);
	stm32_gpiowrite(GPIO_SPI_CS_ACCEL_MAG, 1);
	stm32_gpiowrite(GPIO_SPI_CS_BARO, 1);
	stm32_gpiowrite(GPIO_SPI_CS_HMC, 1);
	stm32_gpiowrite(GPIO_SPI_CS_MPU, 1);

	stm32_configgpio(GPIO_EXTI_GYRO_DRDY);
	stm32_configgpio(GPIO_EXTI_MAG_DRDY);
	stm32_configgpio(GPIO_EXTI_ACCEL_DRDY);
	stm32_configgpio(GPIO_EXTI_MPU_DRDY);
#endif

//片选io初始化
__EXPORT void stm32_spi1select(FAR struct spi_dev_s *dev, enum spi_dev_e devid, bool selected)
{
	/* SPI select is active low, so write !selected to select the device */

	switch (devid) {
	case PX4_SPIDEV_GYRO:  
		/* Making sure the other peripherals are not selected */
		stm32_gpiowrite(GPIO_SPI_CS_GYRO, !selected);
		stm32_gpiowrite(GPIO_SPI_CS_ACCEL_MAG, 1);
		stm32_gpiowrite(GPIO_SPI_CS_BARO, 1);
		stm32_gpiowrite(GPIO_SPI_CS_HMC, 1);
		stm32_gpiowrite(GPIO_SPI_CS_MPU, 1);
		break;
	case PX4_SPIDEV_ACCEL_MAG:
    case PX4_SPIDEV_BARO:	
	case PX4_SPIDEV_HMC:
	case PX4_SPIDEV_LIS:
	case PX4_SPIDEV_MPU:
	
6.  片选spi1中的片选信号: px4fmu-v5

6.1 片选IO初始化
__EXPORT void stm32_spiinitialize(void)
{
#ifdef CONFIG_STM32F7_SPI1

	for (int cs = 0; cs < arraySize(spi1selects_gpio); cs++) {
		if (spi1selects_gpio[cs] != 0) {
			stm32_configgpio(spi1selects_gpio[cs]);
		}
	}

#endif

// 片选IO处理方式
__EXPORT void stm32_spi1select(FAR struct spi_dev_s *dev, enum spi_dev_e devid, bool selected)
{
	/* SPI select is active low, so write !selected to select the device */

	int sel = (int) devid;
	ASSERT(PX4_SPI_BUS_ID(sel) == PX4_SPI_BUS_SENSORS);

	/* Making sure the other peripherals are not selected */

	for (int cs = 0;  arraySize(spi1selects_gpio) > 1 && cs < arraySize(spi1selects_gpio); cs++) {
		if (spi1selects_gpio[cs] != 0) {
			stm32_gpiowrite(spi1selects_gpio[cs], 1);
		}
	}

高级应用：定义片选IO在数组中的位置 src/drivers/boards/common/board_common.h:91:#define PX4_MK_SPI_SEL(b,d)   ((((b) & 0xf) << 4) + ((d) & 0xf))

 * Example:
 *
 * The PX4_SPI_BUS_xxx
 * #define PX4_SPI_BUS_SENSORS  1
 * #define PX4_SPI_BUS_MEMORY   2
 *
 * the PX4_SPIDEV_yyyy
 * #define PX4_SPIDEV_ICM_20689      PX4_MK_SPI_SEL(PX4_SPI_BUS_SENSORS,0)
 * #define PX4_SPIDEV_ICM_20602      PX4_MK_SPI_SEL(PX4_SPI_BUS_SENSORS,1)
 * #define PX4_SPIDEV_BMI055_GYRO    PX4_MK_SPI_SEL(PX4_SPI_BUS_SENSORS,2)
 *
 * The PX4_xxxx_BUS_CS_GPIO
 * #define PX4_SENSOR_BUS_CS_GPIO    {GPIO_SPI_CS_ICM20689, GPIO_SPI_CS_ICM20602, GPIO_SPI_CS_BMI055_GYR,...
 *
 * The PX4_xxxx_BUS_FIRST_CS and PX4_xxxxx_BUS_LAST_CS
 * #define PX4_SENSORS_BUS_FIRST_CS  PX4_SPIDEV_ICM_20689
*  #define PX4_SENSORS_BUS_LAST_CS   PX4_SPIDEV_BMI055_ACCEL
 *
 *
 */

#define PX4_MK_SPI_SEL(b,d)       ((((b) & 0xf) << 4) + ((d) & 0xf))
#define PX4_SPI_BUS_ID(bd)        (((bd) >> 4) & 0xf)
#define PX4_SPI_DEV_ID(bd)        ((bd) & 0xf)

总结： 片选IO在px4fmu-v5和v2区别
v2：使用零散的宏定义搞定： 效率底下，操作简单
V5: 使用数组，就会存在数组元素序号的问题，
    1. 定义元素的位置
	2. 根据位置定义添加到数组中
	3. 修改数组的头和尾部指定的元素

1. 修改

1.1 修改SPI 
- #define PX4_SPI_BUS_BARO       4
+ //#define PX4_SPI_BUS_BARO     4
+ #define PX4_SPI_BUS_BARO     PX4_SPI_BUS_SENSORS

1.2 修改片选IO

1.3 先把spi4进行不使能 defconfig
#CONFIG_STM32F7_SPI4=y


1.4 应用程序已经打开spi4, 关闭spi4的初始化，
    可能还影响spi_ext的初始化.
spi_baro = stm32_spibus_initialize(PX4_SPI_BUS_BARO);
if (!spi_baro) {
	message("[boot] FAILED to initialize SPI port %d\n", PX4_SPI_BUS_BARO);
	return -ENODEV; //直接退出可能影响其他spi的初始化
}

1.5 board.h中定义外设计的GPIO,I2C, CAN, SPI
1.6 board_config.h 中定义外设的GPIO定义

1.7 这里查看到如何直接git clone从远程，是无法push到官网的
user.name=yangang123
user.email=320054593@qq.com
core.repositoryformatversion=0
core.filemode=true
core.bare=false
core.logallrefupdates=true
remote.origin.url=https://github.com/PX4/Firmware.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.master.remote=origin
branch.master.merge=refs/heads/master
submodule.NuttX.url=https://github.com/PX4/PX4NuttX.git

SPI驱动: 
1. 支持I2C, 支持SPI选择
2. 支持是SPI内部总线和外部总线选择
3. 支持线程start, test, stop功能
4. 支持直接操作send, recv接口，同时支持open, read ,ioctl
5. 给算法层提供数据结构

MPU6000: 6

外部中断处理函数:
stm32_vector.s中定义
#if defined(CONFIG_STM32_STM32L15XX)
#  include "chip/stm32l15xxx_vectors.h"
#elif defined(CONFIG_STM32_STM32F10XX)
#  include "chip/stm32f10xxx_vectors.h"
#elif defined(CONFIG_STM32_STM32F20XX)
#  include "chip/stm32f20xxx_vectors.h"
#elif defined(CONFIG_STM32_STM32F30XX)
#  include "chip/stm32f30xxx_vectors.h"
#elif defined(CONFIG_STM32_STM32F37XX)
#  include "chip/stm32f37xxx_vectors.h"
#elif defined(CONFIG_STM32_STM32F40XX)
#  include "chip/stm32f40xxx_vectors.h"
#else
#  error "No vectors for STM32 chip"
#endif
#endif /* CONFIG_STM32_NOEXT_VECTORS */


外部中断定义
VECTOR(stm32_exti0, STM32_IRQ_EXTI0)             /* Vector 16+6:  EXTI Line 0 interrupt */
VECTOR(stm32_exti1, STM32_IRQ_EXTI1)             /* Vector 16+7:  EXTI Line 1 interrupt */
VECTOR(stm32_exti2, STM32_IRQ_EXTI2)             /* Vector 16+8:  EXTI Line 2 interrupt */
VECTOR(stm32_exti3, STM32_IRQ_EXTI3)             /* Vector 16+9:  EXTI Line 3 interrupt */
VECTOR(stm32_exti4, STM32_IRQ_EXTI4)             /* Vector 16+10: EXTI Line 4 interrupt */

LSM303D: BMI055代替 加速计和陀螺仪
L3GD20H: 陀螺仪


//移植
#define PX4_SPIDEV_BARO           PX4_MK_SPI_SEL(PX4_SPI_BUS_BARO,0)
#define PX4_SPIDEV_ICM_20689      PX4_MK_SPI_SEL(PX4_SPI_BUS_SENSORS,1)
#define PX4_SPIDEV_ICM_20602      PX4_MK_SPI_SEL(PX4_SPI_BUS_SENSORS,2)
#define PX4_SPIDEV_BMI055_GYRO    PX4_MK_SPI_SEL(PX4_SPI_BUS_SENSORS,3)
#define PX4_SPIDEV_BMI055_ACCEL   PX4_MK_SPI_SEL(PX4_SPI_BUS_SENSORS,4)

#define PX4_SENSOR_BUS_CS_GPIO    {GPIO_SPI_CS_MS5611, GPIO_SPI_CS_ICM20689, GPIO_SPI_CS_ICM20602, GPIO_SPI_CS_BMI055_GYR, GPIO_SPI_CS_BMI055_ACC}
//#define PX4_SENSORS_BUS_FIRST_CS  PX4_SPIDEV_ICM_20689
#define PX4_SENSORS_BUS_FIRST_CS  PX4_SPIDEV_BARO
#define PX4_SENSORS_BUS_LAST_CS   PX4_SPIDEV_BMI055_ACCEL

#define PX4_SPIDEV_MEMORY         PX4_MK_SPI_SEL(PX4_SPI_BUS_MEMORY,0)
#define PX4_MEMORY_BUS_CS_GPIO    {GPIO_SPI_CS_MEMORY}
#define PX4_MEMORY_BUS_FIRST_CS   PX4_SPIDEV_MEMORY
#define PX4_MEMORY_BUS_LAST_CS    PX4_SPIDEV_MEMORY

//#define PX4_SPIDEV_BARO           PX4_MK_SPI_SEL(PX4_SPI_BUS_BARO,0)

#define PX4_BARO_BUS_CS_GPIO      {GPIO_SPI_CS_MS5611}
#define PX4_BARO_BUS_FIRST_CS     PX4_SPIDEV_BARO
#define PX4_BARO_BUS_LAST_CS      PX4_SPIDEV_BARO

#define PX4_SPIDEV_EXTERNAL1      PX4_MK_SPI_SEL(PX4_SPI_BUS_EXTERNAL,0)
#define PX4_SPIDEV_EXTERNAL2      PX4_MK_SPI_SEL(PX4_SPI_BUS_EXTERNAL,1)
#define PX4_SPIDEV_EXTERNAL3      PX4_MK_SPI_SEL(PX4_SPI_BUS_EXTERNAL,2)
#define PX4_SPIDEV_EXTERNAL4      PX4_MK_SPI_SEL(PX4_SPI_BUS_EXTERNAL,3)
#define PX4_SPIDEV_EXTERNAL5      PX4_MK_SPI_SEL(PX4_SPI_BUS_EXTERNAL,4)
#define PX4_SPIDEV_EXTERNAL6      PX4_MK_SPI_SEL(PX4_SPI_BUS_EXTERNAL,5)
#define PX4_EXTERNAL_BUS_CS_GPIO  {SPI6_EXTERNAL1_CS1, SPI6_EXTERNAL1_CS2, \
		SPI6_EXTERNAL1_CS3, \
		SPI6_EXTERNAL2_CS1, SPI6_EXTERNAL2_CS2, \
		SPI6_EXTERNAL2_CS3}
#define PX4_EXTERNAL_BUS_FIRST_CS  PX4_SPIDEV_EXTERNAL1
#define PX4_EXTERNAL_BUS_LAST_CS   PX4_SPIDEV_EXTERNAL6


MPU6000 on SPI bus 1 at 17 (1000 KHz)：

每个总线挂载是16个设备：

spi1： 