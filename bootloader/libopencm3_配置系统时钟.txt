F4时钟
----------------------------------------------------------
static const struct rcc_clock_scale clock_setup = {
	.pllm = OSC_FREQ,
	.plln = 336,
	.pllp = 2,
	.pllq = 7,
#if defined(STM32F446) || defined(STM32F469)
	.pllr = 2,
#endif
	.hpre = RCC_CFGR_HPRE_DIV_NONE,
	.ppre1 = RCC_CFGR_PPRE_DIV_4,
	.ppre2 = RCC_CFGR_PPRE_DIV_2,
	.power_save = 0,
	.flash_config = FLASH_ACR_ICE | FLASH_ACR_DCE | FLASH_ACR_LATENCY_5WS,
	.apb1_frequency = 42000000,
	.apb2_frequency = 84000000,
};
.pllm = OSC_FREQ, 
   晶振时钟
.plln = 336,
.pllp = 2,
.pllq = 7,

F7时钟
----------------------------------------------------------
/* standard clocking for all F7 boards */
static const struct rcc_clock_scale clock_setup = {
	.pllm = 8,
	.plln = 216,
	.pllp = 2,
	.pllq = 9,
	.pllr = 2,
	.hpre = RCC_CFGR_HPRE_DIV_NONE,
	.ppre1 = RCC_CFGR_PPRE_DIV_4,
	.ppre2 = RCC_CFGR_PPRE_DIV_2,
	.power_save = 0,
	.flash_config = FLASH_ACR_ICE | FLASH_ACR_DCE | FLASH_ACR_LATENCY_5WS,
	.apb1_frequency = 54000000,
	.apb2_frequency = 108000000,
};

.pllm = 8, ：
   已经确定是8MHz晶振
   
px4fmuv2_bl: $(MAKEFILE_LIST) $(LIBOPENCM3)
	make -f Makefile.f4 TARGET_HW=PX4_FMU_V2  LINKER_FILE=stm32f4.ld TARGET_FILE_NAME=$@
	
px4discovery_bl: $(MAKEFILE_LIST) $(LIBOPENCM3)
	make -f Makefile.f4 TARGET_HW=PX4_DISCOVERY_V1  LINKER_FILE=stm32f4.ld TARGET_FILE_NAME=$@

区别: TARGET_HW=PX4_DISCOVERY_V1
文件:
 Makefile.f4 : 编译文件
 stm32f4.ld  : 链接文件
 TARGET_FILE_NAME = px4discovery_bl
 
 MAKEFILE_LIST： 依赖1
 LIBOPENCM3   ： 依赖2  

# define BOARD_PIN_LED_ACTIVITY         GPIO12
# define BOARD_PIN_LED_BOOTLOADER       GPIO13

LED状态取反：
led_toggle(unsigned led)
{
	switch (led) {
	case LED_ACTIVITY:
		gpio_toggle(BOARD_PORT_LEDS, BOARD_PIN_LED_ACTIVITY);
		break;

	case LED_BOOTLOADER:  //bootloader灯
		gpio_toggle(BOARD_PORT_LEDS, BOARD_PIN_LED_BOOTLOADER);
		break;
	}
}



指示系统时钟的滴答
void
sys_tick_handler(void)
{
	unsigned i;

	for (i = 0; i < NTIMERS; i++)
		if (timer[i] > 0) {
			timer[i]--;
		}

	if ((_led_state == LED_BLINK) && (timer[TIMER_LED] == 0)) {
		led_toggle(LED_BOOTLOADER);
		timer[TIMER_LED] = 50;     // 每减少1. 减少50次 50ms
	}
}

# define BOARD_PIN_LED_ACTIVITY         GPIO7    // 硬件的LED2
# define BOARD_PIN_LED_BOOTLOADER       GPIO14   // 硬件的LED3
# define BOARD_PORT_LEDS                GPIOB
# define BOARD_CLOCK_LEDS               RCC_AHB1ENR_IOPBEN
# define BOARD_LED_ON                   gpio_set
# define BOARD_LED_OFF                  gpio_clear


while (1) {
		/* run the bootloader, come back after an app is uploaded or we time out */
		bootloader(timeout);
运行bootloader, 当更新了app或者系统超时，推出运行bootloader。


jump_to_app()
 ->do_jump(app_base[0], app_base[1]);  //运行app程序


//修改部分:
sys_tick_handler(void)
{
//	unsigned i;
/*
	for (i = 0; i < NTIMERS; i++)
		if (timer[i] > 0) {
			timer[i]--;
		}

	//if ((_led_state == LED_BLINK) && (timer[TIMER_LED] == 0)) {
   if ((timer[TIMER_LED] == 0)) {
		led_toggle(LED_BOOTLOADER);
		timer[TIMER_LED] = 50;
	}
*/
        led_toggle(LED_BOOTLOADER);
}


