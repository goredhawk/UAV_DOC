UAVCAN调试信息：
------------------------------------------------------------------------------------------------------------------------

uavcan: Node ID 1, bitrate 1000000
uavcan: SW version vcs_commit: 0x00000000
uavcan: sensor bridge 'gnss' init ok
uavcan: sensor bridge 'mag' init ok
uavcan: sensor bridge 'baro' init ok



UAVCAN调用关系
------------------------------------------------------------------------------------------------------------------------
static UavcanNode *instance() { return _instance; }

if (!std::strcmp(argv[1], "start")) {   //启动节点
	-> return UavcanNode::start(node_id, bitranode_idte);                                // 节点启动当前波特率 
	    ->const int can_init_res = can.init(bitrate);                                    // 驱动初始化
		->_instance = new UavcanNode(can.driver, uavcan_stm32::SystemClock::instance()); // 实例初始化
		->const int node_init_res = _instance->init(node_id);                            // 节点初始化
		     ->_node.setName("org.pixhawk.pixhawk");                                     //创建名字
             ->_node.setNodeID(node_id);                                                 //设置ID号
	         ->fill_node_info();                                                         //填充节点信息
			    ->warnx("SW version vcs_commit: 0x%08x", unsigned(swver.vcs_commit));
				                                                                       //打印节点信息
	          ->ret = _esc_controller.init();                            //Actuators初始化
			  ->IUavcanSensorBridge::
			     make_all(_node, _sensor_bridges);                       // Sensor bridges 桥初始化
			      while (br != nullptr) {
					ret = br->init();
				    warnx("sensor bridge '%s' init ok", br->get_name()); //初始化3个桥
			  ->return _node.start();                                    //节点启动
		->_instance->_task = px4_task_spawn_cmd("uavcan",
 		                  SCHED_DEFAULT, SCHED_PRIORITY_ACTUATOR_OUTPUTS, StackSize,
					      static_cast<main_t>(run_trampoline), nullptr); //创建任务
		->int UavcanNode::run()                               //任务指定的函数 
		     (void)pthread_mutex_lock(&_node_mutex);          //锁定信号量            		
->(void)param_get(param_find("UAVCAN_NODE_ID"), &node_id);  //得到这个节点的状态信息
->(void)param_get(param_find("UAVCAN_BITRATE"), &bitrate);  //获取波特率
->warnx("Node ID %u, bitrate %u", node_id, bitrate);        //打印节点ID和波特率
->if (!std::strcmp(argv[1], "status")                       //输入status和info都输出系统信息
	|| !std::strcmp(argv[1], "info")) {                    
----------------------------------------------------------------------------------------------------------------------
2. 参数信息的表头	
static const struct param_info_s 
   *param_info_base = (const struct param_info_s *) &px4_parameters;
	
1. 发现这个节点信息
param_find_internal(const char *name, bool notification)


BARO 气压信息：

int UavcanNode::start(uavcan::NodeID node_id, uint32_t bitrate)
   -> const int can_init_res = can.init(bitrate);   // 初始化成功

   
_instance = new UavcanNode(can.driver, uavcan_stm32::SystemClock::instance());// 创建1个node对象


static auto run_trampoline = [](int, char *[]) {return UavcanNode::_instance->run();};
_instance->_task = px4_task_spawn_cmd("uavcan", SCHED_DEFAULT, SCHED_PRIORITY_ACTUATOR_OUTPUTS, StackSize,

_instance->run()： 进程的入口，正常就不会退出了


./libuavcan/libuavcan/src/transport/uc_transfer.cpp  
./libuavcan/libuavcan/src/transport/uc_transfer_buffer.cpp 
./libuavcan/libuavcan/src/transport/uc_dispatcher.cpp 
./libuavcan/libuavcan/src/transport/uc_transfer_sender.cpp         //发送
./libuavcan/libuavcan/src/transport/uc_transfer_receiver.cpp       //接收
./libuavcan/libuavcan/src/transport/uc_transfer_listener.cpp       //监听


# if __GNUC__
__attribute__ ((format(printf, 2, 3)))
# endif
static void UAVCAN_TRACE(const char* src, const char* fmt, ...)
{
    va_list args;
    (void)std::printf("UAVCAN: %s: ", src);
    va_start(args, fmt);
    (void)std::vprintf(fmt, args);
    va_end(args);
    (void)std::puts("");
}

#else

# define UAVCAN_TRACE(...) ((void)0)


//f
class UAVCAN_EXPORT TransferSender   //发送数据
{
    const MonotonicDuration max_transfer_interval_;

    Dispatcher& dispatcher_;

    TransferPriority priority_;
    CanTxQueue::Qos qos_;
    TransferCRC crc_base_;
    DataTypeID data_type_id_;
    CanIOFlags flags_;
    uint8_t iface_mask_;
    bool allow_anonymous_transfers_;

    void registerError() const;

public:
    enum { AllIfacesMask = 0xFF };

    static MonotonicDuration getDefaultMaxTransferInterval()
    {
        return MonotonicDuration::fromMSec(60 * 1000);
    }

    TransferSender(Dispatcher& dispatcher, const DataTypeDescriptor& data_type, CanTxQueue::Qos qos,
                   MonotonicDuration max_transfer_interval = getDefaultMaxTransferInterval())
        : max_transfer_interval_(max_transfer_interval)
        , dispatcher_(dispatcher)
        , priority_(TransferPriority::Default)
        , qos_(CanTxQueue::Qos())
        , flags_(CanIOFlags(0))
        , iface_mask_(AllIfacesMask)
        , allow_anonymous_transfers_(false)
    {
        init(data_type, qos);
    }  

    TransferSender(Dispatcher& dispatcher, MonotonicDuration max_transfer_interval = getDefaultMaxTransferInterval())
        : max_transfer_interval_(max_transfer_interval)
        , dispatcher_(dispatcher)
        , priority_(TransferPriority::Default)
        , qos_(CanTxQueue::Qos())
        , flags_(CanIOFlags(0))
        , iface_mask_(AllIfacesMask)
        , allow_anonymous_transfers_(false)
    { }

    void init(const DataTypeDescriptor& dtid, CanTxQueue::Qos qos);

    bool isInitialized() const { return data_type_id_ != DataTypeID(); }

    CanIOFlags getCanIOFlags() const { return flags_; }
    void setCanIOFlags(CanIOFlags flags) { flags_ = flags; }

    uint8_t getIfaceMask() const { return iface_mask_; }
    void setIfaceMask(uint8_t iface_mask)
    {
        UAVCAN_ASSERT(iface_mask);
        iface_mask_ = iface_mask;
    }

    TransferPriority getPriority() const { return priority_; }
    void setPriority(TransferPriority prio) { priority_ = prio; }

    /**
     * Anonymous transfers (i.e. transfers that don't carry a valid Source Node ID) can be sent if
     * the local node is configured in passive mode (i.e. the node doesn't have a valid Node ID).
     * By default, this class will return an error if it is asked to send a transfer while the
     * node is configured in passive mode. However, if this option is enabled, it will be possible
     * to send anonymous transfers from passive mode.
     */
    void allowAnonymousTransfers() { allow_anonymous_transfers_ = true; }

    /**
     * Send with explicit Transfer ID.
     * Should be used only for service responses, where response TID should match request TID.
     */
    int send(const uint8_t* payload, unsigned payload_len, MonotonicTime tx_deadline,
             MonotonicTime blocking_deadline, TransferType transfer_type, NodeID dst_node_id,
             TransferID tid) const;    

    /**
     * Send with automatic Transfer ID.
     *
     * Note that as long as the local node operates in passive mode, the
     * flag @ref CanIOFlagAbortOnError will be set implicitly for all outgoing frames.
     *
     * TID is managed by OutgoingTransferRegistry.
     */
    int send(const uint8_t* payload, unsigned payload_len, MonotonicTime tx_deadline,
             MonotonicTime blocking_deadline, TransferType transfer_type, NodeID dst_node_id) const;
};

class UAVCAN_EXPORT TransferSender   //发送数据


   ->send(xxx, TransferID tid)       //传输带ID
   ->send(xxx)                       //传输数据不带ID


./libuavcan/libuavcan/src/transport/uc_transfer.cpp
         -> void TransferSender::registerError() const
		 -> void TransferSender::init(const DataTypeDescriptor& dtid, CanTxQueue::Qos qos)
		 -> int TransferSender::send(const uint8_t* payload, unsigned payload_len, MonotonicTime tx_deadline,
                         MonotonicTime blocking_deadline, TransferType transfer_type, NodeID dst_node_id,
                         TransferID tid) const
         -> int TransferSender::send(const uint8_t* payload, unsigned payload_len, MonotonicTime tx_deadline,
                         MonotonicTime blocking_deadline, TransferType transfer_type, NodeID dst_node_id) const


   
   class UAVCAN_EXPORT Frame  //数据帧的类结构
       ->bool parse(const CanFrame& can_frame); //接收的包的解析
	                                            //检查是否有错误的
			->if (can_frame.isErrorFrame() || can_frame.isRemoteTransmissionRequest() || !can_frame.isExtended())    
			->if (can_frame.dlc > sizeof(can_frame.data))
			->if (can_frame.dlc < 1)
				
	class UAVCAN_EXPORT TransferReceiver  //接收数据
	


//定义1个结构体，	
static const struct can_ops_s g_canops =
{
  .co_reset         = can_reset,
  .co_setup         = can_setup,
  .co_shutdown      = can_shutdown,
  .co_rxint         = can_rxint,
  .co_txint         = can_txint,
  .co_ioctl         = can_ioctl,
  .co_remoterequest = can_remoterequest,
  .co_send          = can_send,
  .co_txready       = can_txready,
  .co_txempty       = can_txempty,
};

#ifdef CONFIG_STM32_CAN1
static struct stm32_can_s g_can1priv =
{
  .port             = 1,
  .canrx0           = STM32_IRQ_CAN1RX0,
  .cantx            = STM32_IRQ_CAN1TX,
  .filter           = 0,
  .base             = STM32_CAN1_BASE,
  .fbase            = STM32_CAN1_BASE,
  .baud             = CONFIG_CAN1_BAUD,
};

static struct can_dev_s g_can1dev =
{
  .cd_ops           = &g_canops,
  .cd_priv          = &g_can1priv,
};
#endif	   

struct can_dev_s
    -> FAR const struct can_ops_s *cd_ops;   
	-> 