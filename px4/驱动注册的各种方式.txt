int up_putc(int ch)



#ifdef CONFIG_CPP_HAVE_VARARGS
#  ifdef CONFIG_DEBUG
#    define message(...) syslog(__VA_ARGS__)
#    define msgflush()
#  else
#    define message(...) printf(__VA_ARGS__)
#    define msgflush() fflush(stdout)
#  endif
#else
#  ifdef CONFIG_DEBUG
#    define message syslog
#    define msgflush()
#  else
#    define message printf
#    define msgflush() fflush(stdout)
#  endif
#endif


/――------------------------------------------------------------------
注册can总线


―――――――――――――――――――――――――――――/
static const struct file_operations g_canops =
{
  can_open,  /* open */
  can_close, /* close */
  can_read,  /* read */
  can_write, /* write */
  0,         /* seek */
  can_ioctl  /* ioctl */
#ifndef CONFIG_DISABLE_POLL
  , 0        /* poll */
#endif
};

//------------------------------------1-------------->
static struct can_dev_s g_can1dev =
{
  .cd_ops           = &g_canops,     --------------------------------------->
  .cd_priv          = &g_can1priv, 
};



int can_devinit(void)   【px4fmu_can.c】
   ---> 
   
   
void os_start(void) //os_start.c
 ->
 up_initialize()
   ->devnull_register();   /* Standard /dev/null */
       devzero_register();   /* Standard /dev/zero */
         /* Initialize the serial device driver */
    #ifdef USE_SERIALDRIVER
      up_serialinit();
    #endif
    
  // 字符设备驱动是通过c++的构造函数注册的
    CDev::CDev(const char *name,
	   const char *devname,
	   int irq) :
	// base class
	Device(name, irq),
	// public
	// protected
	_pub_blocked(false),
	// private
	_devname(devname),
	_registered(false),
	_open_count(0)
{
	for (unsigned i = 0; i < _max_pollwaiters; i++) {
		_pollset[i] = nullptr;
	}
}
  
 串口驱动是通过底层up_serialinit注册的.
    